1. Ambiente de Desenvolvimento:
Python: Instale a versão mais recente do Python.
Virtualenv: Crie um ambiente virtual para isolar as dependências do projeto:
python3 -m venv .venv
source .venv/bin/activate  # (Linux/macOS)
.venv\Scripts\activate  # (Windows)

Editor de código: Escolha um editor de código que você goste (VS Code, PyCharm, Sublime Text, etc.).
FastAPI: Instale o FastAPI no ambiente virtual:
pip install fastapi uvicorn pydantic

pytest: Instale o pytest para testes:
pip install pytest

2. Estrutura do Projeto:
Crie a estrutura básica do projeto:
fastapi-tdd-api/
├── main.py       # Arquivo principal da API
└── tests/
    └── test_main.py  # Arquivo de testes

3. Teste de Integração da API (test_main.py):
Comece escrevendo um teste para a rota / da sua API:
import requests

def test_get_root():
    response = requests.get("http://127.0.0.1:8000/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello, World!"}

4. Implemente a API (main.py):
Agora, implemente a rota / da API para que o teste passe:

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello, World!"}

5. Executar os Testes:
Execute os testes:
pytest

6. Definindo o modelo de dados (main.py):
Crie um modelo de dados para os usuários usando Pydantic:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    id: int
    nome: str
    email: str

7. Testes para o modelo de dados (test_main.py):
Crie testes para o modelo de dados:

import pytest
from main import User

def test_user_model_creation():
    user = User(id=1, nome="João Silva", email="joao.silva@example.com")
    assert user.id == 1
    assert user.nome == "João Silva"
    assert user.email == "joao.silva@example.com"

def test_user_model_validation():
    with pytest.raises(ValueError):
        User(id=1, nome="", email="joao.silva@example.com")

    with pytest.raises(ValueError):
        User(id=1, nome="João Silva", email="")


8. Implementando a rota GET (main.py):
Crie a rota GET para obter todos os usuários:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

# ... (modelo de dados User)

# Lista de usuários (simulado, use um banco de dados em produção)
users = [
    {"id": 1, "nome": "João Silva", "email": "joao.silva@example.com"},
    {"id": 2, "nome": "Maria Santos", "email": "maria.santos@example.com"}
]

@app.get("/users")
async def get_users():
    return users

9. Teste para a rota GET (test_main.py):
Crie o teste para a rota GET:
import requests

def test_get_users():
    response = requests.get("http://127.0.0.1:8000/users")
    assert response.status_code == 200
    assert len(response.json()) == 2

10. Implementando a rota POST (main.py):
Crie a rota POST para criar um novo usuário:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

# ... (modelo de dados User, lista de usuários)

@app.post("/users")
async def create_user(user: User):
    users.append({"id": len(users) + 1, "nome": user.nome, "email": user.email})
    return {"message": "Usuário criado com sucesso."}

11. Teste para a rota POST (test_main.py):
Crie o teste para a rota POST:
import requests

def test_create_user():
    new_user = {"nome": "Pedro Rodrigues", "email": "pedro.rodrigues@example.com"}
    response = requests.post("http://127.0.0.1:8000/users", json=new_user)
    assert response.status_code == 200
    assert response.json()["message"] == "Usuário criado com sucesso."

12. Implementando a rota PUT (main.py):
Crie a rota PUT para atualizar um usuário:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

# ... (modelo de dados User, lista de usuários)

@app.put("/users/{user_id}")
async def update_user(user_id: int, user: User):
    user_index = next((index for index, u in enumerate(users) if u["id"] == user_id), None)
    if user_index is not None:
        users[user_index] = {"id": user_id, "nome": user.nome, "email": user.email}
        return {"message": "Usuário atualizado com sucesso."}
    else:
        raise HTTPException(status_code=404, detail="Usuário não encontrado.")

13. Teste para a rota PUT (test_main.py):
Crie o teste para a rota PUT:
import requests

def test_update_user():
    updated_user = {"nome": "João da Silva", "email": "joao.silva@newdomain.com"}
    response = requests.put("http://127.0.0.1:8000/users/1", json=updated_user)
    assert response.status_code == 200
    assert response.json()["message"] == "Usuário atualizado com sucesso."

14. Implementando a rota DELETE (main.py):
Crie a rota DELETE para deletar um usuário:
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

# ... (modelo de dados User, lista de usuários)

@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    user_index = next((index for index, u in enumerate(users) if u["id"] == user_id), None)
    if user_index is not None:
        del users[user_index]
        return {"message": "Usuário deletado com sucesso."}
    else:
        raise HTTPException(status_code=404, detail="Usuário não encontrado.")

15. Teste para a rota DELETE (test_main.py):
Crie o teste para a rota DELETE:
import requests

def test_delete_user():
    response = requests.delete("http://127.0.0.1:8000/users/1")
    assert response.status_code == 200
    assert response.json()["message"] == "Usuário deletado com sucesso."

16. Executar os Testes:
Execute os testes:
pytest

17. Executar a API (main.py):
uvicorn main:app --reload

18. Documentação da API:
Swagger UI: Acesse http://127.0.0.1:8000/docs para ver a documentação da API.
Redoc: Acesse http://127.0.0.1:8000/redoc para outra visualização da documentação.

19. Dockerizar a API:
Dockerfile:

FROM python:3.10-slim

WORKDIR /app

COPY requirements.txt .

RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]



docker-compose.yml:

version: "3.9"
services:
  fastapi-app:
    build: .
    ports:
      - "8000:8000"

Construa e execute a imagem do Docker:

docker-compose up -d

